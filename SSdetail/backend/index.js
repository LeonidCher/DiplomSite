const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const nodemailer = require('nodemailer');
const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
app.use(express.json());
app.use(cors());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è nodemailer
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'vlastleonida@gmail.com', // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π email
    pass: 'yrigjcouksuzfqzg', // –ó–∞–º–µ–Ω–∏ –Ω–∞ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  },
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è nodemailer
transporter.verify((error, success) => {
  if (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nodemailer:', error);
  } else {
    console.log('Nodemailer –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å–µ–º');
  }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/diplom', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
  .catch(err => console.log('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// –°—Ö–µ–º–∞ –∏ –º–æ–¥–µ–ª—å –¥–ª—è –∑–∞—è–≤–∫–∏
const applicationSchema = new mongoose.Schema({
  name: { type: String, required: true },
  carModel: { type: String, required: true },
  service: { type: String, required: true },
  email: { type: String, required: true },
  phone: { type: String, required: true },
  dateTime: { type: String, required: true },
});

const Application = mongoose.model('Application', applicationSchema);

// –°—Ö–µ–º–∞ –∏ –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–∑—ã–≤–∞
const reviewSchema = new mongoose.Schema({
  name: { type: String, required: true },
  text: { type: String, required: true },
  createdAt: { type: Date, default: Date.now },
});

const Review = mongoose.model('Review', reviewSchema);

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∑–∞—è–≤–æ–∫
app.get('/api/applications', async (req, res) => {
  try {
    const applications = await Application.find();
    res.status(200).json(applications);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/applications', async (req, res) => {
  try {
    const application = new Application(req.body);
    await application.save();

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    const mailOptions = {
      from: 'your-email@gmail.com',
      to: application.email,
      subject: '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! üéâ',
      html: `
        <h2>–°–ø–∞—Å–∏–±–æ, ${application.name}, –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!</h2>
        <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —É—Å–ª—É–≥—É "${application.service}" –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${application.carModel}. –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ${application.phone} –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ ${new Date(application.dateTime).toLocaleString()}.</p>
        <p><strong>–°–∫–∏–¥–∫–∞ 20% –∂–¥–µ—Ç –≤–∞—Å!</strong> –ó–∞–ø–∏—à–∏—Ç–µ—Å—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–∏ –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏ ‚Äî –ø–æ–ª–∏—Ä–æ–≤–∫—É –∫—É–∑–æ–≤–∞ –∏–ª–∏ —Ç–æ–Ω–∏—Ä–æ–≤–∫—É —Å –ø—Ä–µ–º–∏—É–º-–ø–æ–∫—Ä—ã—Ç–∏–µ–º. –ö–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ–≤–µ—Ä—è—é—Ç —Å 2020 –≥–æ–¥–∞!</p>
        <p>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞–º –Ω–∞ <a href="http://localhost:5173">—Å–∞–π—Ç SS Detailing</a> –∏ –ø–æ–ª—É—á–∏—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ!</p>
        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br/>–ö–æ–º–∞–Ω–¥–∞ SS Detailing</p>
      `,
    };

    await transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      } else {
        console.log('Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞', application.email, info.response);
      }
    });

    res.status(201).json(application);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', err);
    res.status(400).json({ message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: ${err.message}` });
  }
});

app.delete('/api/applications/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const application = await Application.findByIdAndDelete(id);
    if (!application) {
      return res.status(404).json({ message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    res.status(200).json({ message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    res.status(500).json({ message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: ${err.message}` });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
app.get('/api/reviews', async (req, res) => {
  try {
    const reviews = await Review.find();
    res.status(200).json(reviews);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/reviews', async (req, res) => {
  try {
    const review = new Review(req.body);
    await review.save();
    res.status(201).json(review);
  } catch (err) {
    res.status(400).json({ message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: ${err.message}` });
  }
});

app.delete('/api/reviews/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const review = await Review.findByIdAndDelete(id);
    if (!review) {
      return res.status(404).json({ message: '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.status(200).json({ message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
  } catch (err) {
    res.status(500).json({ message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: ${err.message}` });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(5000, () => {
  console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000');
});